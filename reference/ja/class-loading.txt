クラスのロードはクラスとインターフェイスを多用する PHP アプリケーションの必要不可欠な一部です。不幸なことに、多くの人々とプロジェクトがカスタマイズされ特化されたクラスロード戦略に多くの時間と労力を費やしています。それぞれが独自のクラスロードのしくみをもっている複数のライブラリやフレームワークを使うときにそれらが何を行っているのか理解することがすぐに苦痛になり得ます。クラスのロードのしくみはシンプルで、設定よりも規約の理想的な候補であるべきです。

++ 概要

Doctrine Common ClassLoader は理解しやすくて使いやすいクラスロードのしくみを実装しています。この実装は名前空間とクラス名をディレクトリ構造にマッピングする広く受け入れられた慣習にもとづきます。このアプローチを採用しているのはたとえば Symfony2、Zend Framework そして、もちろん Doctrine です。

たとえば、つぎのようなクラスを考えます。

    [php]
    namespace MyProject\Shipping;
    class ShippingStrategy { ... }

このクラスはつぎのディレクトリ構造のなかにあります。

    src/
      /MyProject
        /Shipping
           ShippingStrategy.php

"src" もしくは上記の構造もしくはこのディレクトリの内外の名前は完全に任意であることにご注意ください。"src" は "classes" や "lib" など任意の名前をつけることができます。固執する唯一の慣習は名前空間をディレクトリに、クラスをクラスの名前をとったファイルにマッピングすることです。


++ 使いかた

Doctrine Common ClassLoader を使うには、まず ClassLoader を名前に含むクラスファイルをロードする必要があります。これが `require` 文をとおして明示的にロードする必要性のあるクラスファイルです。ほかのすべてのクラスはコンフィギュレーションが調整されたクラスローダーによって必要に応じてロードされます。

    [php]
    use Doctrine\Common\ClassLoader;
    require '/path/to/Doctrine/Common/ClassLoader.php';
    $classLoader = new ClassLoader('MyProject', '/path/to/src');

`ClassLoader` は2つのコンストラクタパラメータをとり、これらは両方ともオプションです。通常のケースにおいて両方の引数が提供されます。１番目の引数はこのクラスローダーが責務を担う名前空間のプレフィックスを指定し、2番目のパラメータは以前言及した慣習にしたがってクラスを見つけられるルートディレクトリへのパスです。

上記の例においてクラスローダーは 'MyProject' 名前空間のもとですべてのクラスに対して責務を負い、'/path/to/src' ディレクトリではじまるクラスファイルの名前を探します。

1番目の引数で提供されたプレフィックスはルートの名前空間である必要はありませんが、任意なネストの名前空間になり得ます。このことによってサブ名前空間のソースを異なるディレクトリにまたがって分割することできます。たとえば、Doctrine の傘のもとにあるすべてのプロジェクトは Doctrine 名前空間のなかにありますが、それぞれのプロジェクトが共通のルートディレクトリのなかに通常は存在しない場合です。 つぎの例は3つのクラスローダーのコンフィギュレーションを決め、それぞれが Doctrine のプロジェクトで使われています。

    [php]
    use Doctrine\Common\ClassLoader;
    require '/path/to/Doctrine/Common/ClassLoader.php';
    $commonLoader = new ClassLoader('Doctrine\Common', '/path/to/common/lib');
    $dbalLoader = new ClassLoader('Doctrine\DBAL', '/path/to/dbal/lib');
    $ormLoader = new ClassLoader('Doctrine\ORM', '/path/to/orm/lib');
    $commonLoader->register();
    $dbalLoader->register();
    $ormLoader->register();

複数のクラスローダーを使うことをためらわないでください。効率的なクラスロードのデザインのおかげで、たくさんのクラスローダーを使っても、多くのオーバーヘッドが生じることはありません。クラスロードのしくみがいかにシンプルで効率的なのか `ClassLoader#loadClass` の実装をのぞいてみましょう。インストールされたクラスローダーへのイテレーションは C 言語による実装に匹敵します (`ClassLoader::classExists` を使うことは除きます)。

ClassLoader はつぎのほかのバリエーションで使うことができます。しかしながら、これらが使われたり必要になることはほとんどありません。

* 第2引数だけが提供されない場合、クラスローダーは1番目の引数から提供された名前空間のプレフィックスに対して責務を負い、PHP の include_path ディレクティブの値に頼ります。

* 第1引数だけが提供されない場合、クラスローダーは*すべての*クラスに対して責務を負い、第2引数で提供されたディレクトリではじめる*すべての*クラスを探そうとします。

* 両方の引数が提供されない場合、クラスローダーは*すべての*クラスに対して責務を負い、PHP の include_path ディレクティブの値に頼ります。


++ ファイルの拡張子

デフォルトでは、ClassLoader は `.php` をすべてのクラスファイルの拡張子に使います。このふるまいを変えることができます。たとえば、".class.php" の慣習にしたがうライブラリからクラスをロードする ClassLoader を使う場合です (しかし、これはディレクトリ構造の慣習に執着しなければなりません！)。

    [php]
    $customLoader = new ClassLoader('CustomLib', '/path/to/custom/lib');
    $customLoader->setFileExtension('.class.php');
    $customLoader->register();


++ 名前空間の区切り文字

デフォルトでは、ClassLoader は `\` を名前空間の区切り文字に使います。このふるまいを変えることができます。たとえば、アンダースコア "_" を区切り文字に使うレガシーな Zend Framework のクラスをロードする ClassLoader を使う場合です。

    [php]
    $zend1Loader = new ClassLoader('Zend', '/path/to/zend/lib');
    $zend1Loader->setNamespaceSeparator('_');
    $zend1Loader->register();


++ 暗黙のロード失敗と class_exists

こんにちにおいて多くのクラス/オートローダーはクラスファイルが存在しないときに暗黙のうちにエラーになります。この大半の部分において、ブール値を返すがオートロードを作動させる `class_exists('ClassName', true)` をサポートするためにこれは必要不可欠です。クラスローダーに暗黙のエラーを強制させるので、これはわるいことです。少なくとも 99% のケースで必要ではないにもかかわらず、コストの高い file_exists もしくは fopen を交互に呼び出すことになるからです (1回のリクエストでロードされるクラスの合計数と class_exists(..., true) 呼び出し回数を比較してください)。

Doctrine Common ClassLoader は暗黙のうちにエラーにならない設計になっています。それゆえ、コストの高いファイルの存在チェックを必要としません。ClassLoader は特定の名前空間のプレフィックスがつけられたすべてのクラスに対してつねに責務を負い、クラスがリクエストされたものの見つからなければ致命的なエラーとみなされます。このことが意味するのは Doctrine Common ClassLoader を使うことにクラスの存在をチェックするために class_exists(..., true) を使うことができないことです。これはわるいことではありません。What class_exists(..., true) が実際に意味することは2つのことです: 1) クラスがそでに定義されている/存在している (すなわち class_exists(..., false)) そうでなければ 2) クラスファイルがそのクラスのためにロードできるかどうかです。Doctrine Common ClassLoader において、クラスのロードと存在のチェックの2つの責務は分離されています。`loadClass` と `canLoadClass` の2つのメソッドの存在によって観測できます。それゆえ `loadClass` は意図的に `canLoadClass` を内部で起動させません。しかしながら、クラスがロード可能であるかチェックするために自分自身でこれを自由に使うことができます。つぎのコードスニペットは class_exists(..., true) と同等です。

    [php]
    // チェックするクラスローダーが１つだけ存在する場合に (class_exists('Foo', true)) と同等です。
    if (class_exists('Foo', false) || $classLoader->canLoadClass('Foo')) {
      // ...
    }

クラスローダーの周りの参照を用意する必要があるので、このコードの唯一の問題は不便であることです (よく複数のクラスローダーが使われます)。それゆえ、すべてのクラスローダーが `ClassLoader::classExists($className)` クラスをロードできるかどうか本当に問いたい場合にシンプルな代わりの方法があります

    [php]
    // Equivalent to if (class_exists('Foo', true))
    if (ClassLoader::classExists('Foo')) {
      // ...
    }

このスタティックメソッドは基本的に class_exists(..., true) の差し込み式の置き換えとして使うことができます。このメソッドはインストールされたすべてのクラスローダーをイテレートし、`canLoadClass` を介してこれらのそれぞれに問い、1つのクラスローダーが `canLoadClass` から TRUE を返すと同時になるべくはやく (TRUE) 返します。これら潜在的にコストが高いように聞こえるのであれば、それは本当です。class_exists(..., true) が水面下でおこなうこととまったく同じことです。これはすべてのクラス/オートローダーの完全なイテレーションを作動させます。オートロードの起動を介してクラスの存在をチェックすることはけっしてチープなことではありませんでしたが、今よりあきらかでより重要なのは、このチェックは通常のクラスロードに閉じ込められなくなった、つまり、ロードすることに先駆けて存在についてそれぞれとすべてのクラスをチェックしなくてすむということです。ロードされるクラスの大多数はオプション*ではなく*、そのようなクラスをロードするのに失敗した場合は致命的なエラーになります。ClassLoader の設計はこれを反映させます。

アプリケーションの通常の実行時 (すなわち、リクエストごとに) `class_exists(..., true)` もしくは `ClassLoader::classExists` を使うことが必要であれば、それを避けるように設計をリファクタリングすることを心がけてください。


++ まとめ

使いたいクラスローダーがなんであれ (Doctrine クラスはこれらがどのようにロードされたのかは気にしません)、クラス名をディレクトリ構造にマッピングすることにこだわることをこころよくおすすめします。

クラスロードはシンプルで、自動化されおり、統一性があるべきです。特別なディレクトリ構造を設計したり、オートローダーやクラスロードのためのかしこいキャッシング戦略よりも実際のアプリケーション開発に時間は投資されるべきです。